hannes@desktop ~/Dev/ID1021 (main *) $ ./run-project.sh priority_queue
Available:
  intro
  calc [-D DEBUG]
  binary_search
  sort
  linked_list
  doubly_linked_list
  trees
  queue
  quicksort
  priority_queue
  hashtable
  graph

Trying to build and run priority_queue

Verifying that queues work correctly...
  PriorityListQueue O(1) Add... Correct
  PriorityListQueue O(1) Remove... Correct
  HeapQueue... Correct
  HeapArrayQueue... Correct

Benchmarking queues...
  [PriorityListQueue O(1) Add] n=50: 4928.38 ns (± 45.17 ns)
  [PriorityListQueue O(1) Add] n=100: 13335.18 ns (± 51.42 ns)
  [PriorityListQueue O(1) Add] n=250: 59185.74 ns (± 1010.17 ns)
  [PriorityListQueue O(1) Add] n=500: 204070.56 ns (± 2232.78 ns)
  [PriorityListQueue O(1) Add] n=1000: 763181.39 ns (± 759.01 ns)
  [PriorityListQueue O(1) Add] n=2500: 6893788.90 ns (± 2927.54 ns)
  [PriorityListQueue O(1) Add] n=5000: 29712497.47 ns (± 6092.09 ns)

  [PriorityListQueue O(1) Remove] n=50: 3006.86 ns (± 13.26 ns)
  [PriorityListQueue O(1) Remove] n=100: 7425.18 ns (± 67.26 ns)
  [PriorityListQueue O(1) Remove] n=250: 32699.82 ns (± 3392.78 ns)
  [PriorityListQueue O(1) Remove] n=500: 106502.93 ns (± 4081.79 ns)
  [PriorityListQueue O(1) Remove] n=1000: 454043.29 ns (± 1763.51 ns)
  [PriorityListQueue O(1) Remove] n=2500: 3426459.27 ns (± 1984.93 ns)
  [PriorityListQueue O(1) Remove] n=5000: 14414975.55 ns (± 22298.38 ns)

  [HeapQueue] n=50: 4545.82 ns (± 39.34 ns)
  [HeapQueue] n=100: 10657.66 ns (± 91.92 ns)
  [HeapQueue] n=250: 32776.86 ns (± 248.49 ns)
  [HeapQueue] n=500: 74511.76 ns (± 666.51 ns)
  [HeapQueue] n=1000: 163599.83 ns (± 948.02 ns)
  [HeapQueue] n=2500: 462888.06 ns (± 1087.52 ns)
  [HeapQueue] n=5000: 1012635.87 ns (± 2973.62 ns)

  [HeapArrayQueue] n=50: 5074.22 ns (± 20.92 ns)
  [HeapArrayQueue] n=100: 11583.61 ns (± 30.68 ns)
  [HeapArrayQueue] n=250: 34169.43 ns (± 315.09 ns)
  [HeapArrayQueue] n=500: 74378.37 ns (± 168.18 ns)
  [HeapArrayQueue] n=1000: 162460.76 ns (± 735.67 ns)
  [HeapArrayQueue] n=2500: 448451.97 ns (± 2067.28 ns)
  [HeapArrayQueue] n=5000: 1003128.33 ns (± 32371.56 ns)


Benchmarking queue depth...
  [HeapQueue] n=50: push { average=5.00,min=5,max=5 } increment { average=2.40,min=0,max=4 }
  [HeapQueue] n=100: push { average=6.00,min=6,max=6 } increment { average=3.03,min=0,max=5 }
  [HeapQueue] n=250: push { average=7.00,min=7,max=7 } increment { average=4.02,min=1,max=6 }
  [HeapQueue] n=500: push { average=8.00,min=8,max=8 } increment { average=4.53,min=0,max=7 }
  [HeapQueue] n=1000: push { average=9.00,min=9,max=9 } increment { average=5.40,min=0,max=8 }
  [HeapQueue] n=2500: push { average=10.00,min=10,max=10 } increment { average=6.83,min=3,max=9 }
  [HeapQueue] n=5000: push { average=11.00,min=11,max=11 } increment { average=7.38,min=0,max=10 }

  [HeapArrayQueue] n=50: push { average=0.90,min=0,max=5 } increment { average=2.72,min=0,max=5 }
  [HeapArrayQueue] n=100: push { average=1.55,min=0,max=6 } increment { average=3.50,min=0,max=6 }
  [HeapArrayQueue] n=250: push { average=0.87,min=0,max=6 } increment { average=4.80,min=1,max=8 }
  [HeapArrayQueue] n=500: push { average=1.02,min=0,max=6 } increment { average=5.27,min=0,max=8 }
  [HeapArrayQueue] n=1000: push { average=1.18,min=0,max=5 } increment { average=6.12,min=0,max=10 }
  [HeapArrayQueue] n=2500: push { average=0.87,min=0,max=5 } increment { average=7.85,min=5,max=11 }
  [HeapArrayQueue] n=5000: push { average=1.50,min=0,max=6 } increment { average=8.38,min=0,max=12 }

real    0m14.511s
user    0m14.493s
sys     0m0.000s